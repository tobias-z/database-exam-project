name: Rust Pipeline
description: Generic rust pipeline to be run on any project

inputs:
  working_directory:
    description: The working directory of the project
    required: true
  compose_files:
    description: A comma seperated list of docker compose files that should be run, relative to the working directory
    required: false
    default: ""
  uses_grpc:
    description: If the project uses grpc
    required: true
    default: no
  docker_username:
    description: username to docker
    required: true
  docker_password:
    description: password to docker
    required: true

runs:
  using: composite
  steps:
    # Uncomment if you are using a docker compose to setup your environment
    - name: Setup environment
      working-directory: ${{ inputs.working_directory }}
      if: ${{ inputs.compose_files != '' }}
      shell: bash
      env:
        COMPOSE_FILES: ${{ inputs.compose_files }}
      run: |
        docker compose $(sh hack/compose-list $COMPOSE_FILES) up -d
        # Ensure that containers are ready
        # In practice of a real production app, we would prob want to have a list of things that we should wait for, and then check if all those services are healthy
        sleep 10

    - name: Setup Rust
      uses: ./.github/actions/setup-rust
      with:
        grpc: ${{ inputs.uses_grpc }}

    - name: Run tests
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: cargo nextest run --workspace

    - name: Run cargo build
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: cargo build --workspace

    - name: Run cargo clippy
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: cargo clippy --workspace

    - name: Run format check
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: cargo fmt --check

    - name: Deploy to dockerhub
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        sudo apt install libxml-xpath-perl -y
        echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin

        version=$(cat Cargo.toml | grep version | head -n 1 | tr 'version = "' " " | xargs | awk '{print tolower($0)}')
        for file in *.Dockerfile; do
          lower_case_image="$DOCKER_USERNAME/$(echo "$file" | sed 's/.Dockerfile//' | awk '{print tolower($0)}')"
          branch_name=$(echo $GITHUB_REF | cut -d'/' -f 3 | tr / -)
          if [ "$branch_name" = "main" ]; then
            image="$lower_case_image:$branch_name-$version"
          else
            image="$lower_case_image:$branch_name-$version-snapshot"
          fi

          docker build --tag "$image" -f "$file" .
          docker push "$image"
        done
      env:
        DOCKER_USERNAME: ${{ inputs.docker_username }}
        DOCKER_PASSWORD: ${{ inputs.docker_password }}
