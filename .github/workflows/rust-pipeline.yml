name: Rust Pipeline

on:
  workflow_call:
    inputs:
      working_directory:
        description: The working directory of the project
        type: string
        required: true
      run_docker_compose:
        description: Whether to run docker composes before building and testing
        type: string
        required: false
        default: no
      uses_grpc:
        description: If the project uses grpc
        type: string
        required: true
        default: no
      docker_username:
        type: string
        description: username to docker
        required: true
      docker_password:
        type: string
        description: password to docker
        required: true

defaults:
  run:
    working-directory: ${{ inputs.working_directory }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Setup environment
        if: ${{ inputs.run_docker_compose == 'yes' }}
        shell: bash
        run: |
          docker compose up -d
          # Ensure that containers are ready
          # In practice of a real production app, we would prob want to have a list of things that we should wait for, and then check if all those services are healthy
          sleep 10

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          grpc: ${{ inputs.uses_grpc }}

      - uses: taiki-e/install-action@ddfbd2cab72fd94842c80ade93f28fe7ee9c71f8 # nextest

      - name: Run tests
        shell: bash
        run: cargo nextest run --workspace

  check:
    runs-on: ubuntu-latest
    name: Check
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Setup environment
        if: ${{ inputs.run_docker_compose == 'yes' }}
        shell: bash
        run: |
          docker compose up -d
          # Ensure that containers are ready
          # In practice of a real production app, we would prob want to have a list of things that we should wait for, and then check if all those services are healthy
          sleep 10

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          grpc: ${{ inputs.uses_grpc }}

      - name: Run cargo build
        shell: bash
        run: cargo build --workspace

      - name: Run cargo clippy
        shell: bash
        run: cargo clippy --workspace

      - name: Run format check
        shell: bash
        run: cargo fmt --check

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs:
      - test
      - check
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Deploy to dockerhub
        shell: bash
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          sudo apt install libxml-xpath-perl -y
          echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin

          version=$(cat Cargo.toml | grep version | head -n 1 | tr 'version = "' " " | xargs | awk '{print tolower($0)}')
          for file in *.Dockerfile; do
            lower_case_image="$DOCKER_USERNAME/$(echo "$file" | sed 's/.Dockerfile//' | awk '{print tolower($0)}')"
            branch_name=$(echo $GITHUB_REF | cut -d'/' -f 3 | tr / -)
            if [ "$branch_name" = "main" ]; then
              image="$lower_case_image:$branch_name-$version"
            else
              image="$lower_case_image:$branch_name-$version-snapshot"
            fi

            docker build --tag "$image" -f "$file" .
            docker push "$image"
          done
        env:
          DOCKER_USERNAME: ${{ inputs.docker_username }}
          DOCKER_PASSWORD: ${{ inputs.docker_password }}
